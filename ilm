<!DOCTYPE html>
<html lang="es">
<head>
<meta http-equiv="Content-Security-Policy" content="default-src 'self'; connect-src 'self' https://*.supabase.co; img-src 'self' data: https: blob:; script-src 'self' https://cdn.jsdelivr.net https://cdnjs.cloudflare.com 'unsafe-inline'; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src https://fonts.gstatic.com; frame-ancestors 'none'; base-uri 'self';">

<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>Intercambio Libros Madrid</title>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" crossorigin="anonymous" referrerpolicy="no-referrer">
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2" defer></script>
<meta name="theme-color" content="#8B6941">

<style>
:root{
  --primary-wood:#8B6941;
  --primary-accent:#9B7653;
  --primary-soft:#F5E6D3;
  --primary-pale:#FAF4ED;
  --text-primary:#3E2723;
  --text-secondary:#5D4037;
  --text-hint:#BCAAA4;
  --surface:#fff;
  --bg:#FBF7F3;
  --success:#5D8A5D;
  --warning:#CC7A00;
  --error:#B85450;
  --shadow:0 2px 10px rgba(139,105,65,.18);
  --radius:12px;
  --space:.75rem;
  --space-lg:1.25rem;
  --space-xl:1.75rem;
}
*{box-sizing:border-box}
html,body{height:100%}
body{margin:0;font-family:Inter,system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,sans-serif;background:var(--bg);color:var(--text-primary)}

/* auth */
.auth-wrapper{min-height:100vh;display:grid;place-items:center;padding:var(--space-xl)}
.auth-card{max-width:460px;width:100%;background:#fff;border-radius:12px;box-shadow:var(--shadow);padding:var(--space-xl)}
.auth-title{margin:0 0 var(--space);display:flex;gap:.6rem;align-items:center;font-weight:800;color:var(--primary-wood)}
.grid-2{display:grid;grid-template-columns:1fr 1fr;gap:.75rem}
.form-group{margin-bottom:var(--space)}
.form-label{display:block;font-size:.9rem;margin-bottom:.35rem;color:var(--text-secondary)}
.form-input,.form-select,.form-textarea{width:100%;border:1px solid var(--primary-soft);background:#fff;padding:.75rem .8rem;border-radius:10px;outline:none}
.form-textarea{min-height:84px;resize:vertical}
.btn{display:inline-flex;align-items:center;justify-content:center;border:none;border-radius:10px;padding:.8rem 1rem;gap:.5rem;cursor:pointer;box-shadow:var(--shadow);font-weight:600}
.btn:disabled{opacity:.7;cursor:not-allowed}
.btn-primary{background:linear-gradient(135deg,var(--primary-wood),var(--primary-accent));color:#fff}
.btn-secondary{background:#fff;border:1px solid var(--primary-soft)}
.btn-text{background:transparent;border:none;color:var(--primary-wood);cursor:pointer;padding:.4rem;text-decoration:underline}
.hint{font-size:.85rem;color:var(--text-hint)}
.divider{height:1px;background:var(--primary-soft);margin:var(--space-lg) 0}
.oauth-row{display:grid;grid-template-columns:repeat(2,1fr);gap:.5rem}
.oauth-btn{border:1px dashed var(--primary-soft);background:#fff;border-radius:10px;padding:.6rem;display:flex;align-items:center;justify-content:center;gap:.4rem;cursor:pointer}

/* app */
.app-container{max-width:960px;margin:0 auto;padding-bottom:110px}
@supports (padding: max(0px)) {.app-container{ padding-bottom:max(110px, env(safe-area-inset-bottom)); }}
.app-header{position:sticky;top:0;background:#fff;display:flex;justify-content:space-between;align-items:center;padding:var(--space);z-index:20;border-bottom:1px solid var(--primary-soft)}
.logo{display:flex;gap:.6rem;align-items:center;font-weight:800;color:var(--primary-wood)}
.header-actions{display:flex;align-items:center;gap:.5rem}
.points{display:inline-flex;gap:.4rem;align-items:center;background:var(--primary-soft);padding:.35rem .6rem;border-radius:999px}
.notification-btn,.profile-btn{width:40px;height:40px;border-radius:10px;border:1px solid var(--primary-soft);background:#fff;display:grid;place-items:center;cursor:pointer}
.nav-tabs{position:fixed;left:0;right:0;bottom:0;background:#fff;border-top:1px solid var(--primary-soft);display:grid;grid-template-columns:repeat(4,1fr);z-index:20}
.nav-tab{padding:.55rem 0;display:grid;place-items:center;border:none;background:#fff;color:var(--text-secondary);gap:.25rem;cursor:pointer}
.nav-tab.active{color:var(--primary-wood);font-weight:700}
.main-content{padding:var(--space)} .page{display:none} .page.active{display:block}

/* books */
.books-grid{display:grid;grid-template-columns:repeat(auto-fill,minmax(150px,1fr));gap:.75rem}
.book-card{background:#fff;border:1px solid var(--primary-soft);border-radius:12px;overflow:hidden;cursor:pointer;box-shadow:var(--shadow);transition:transform .15s}
.book-card:hover{transform:translateY(-2px)}
.book-cover{height:160px;background:linear-gradient(135deg,var(--primary-wood),var(--primary-accent));display:grid;place-items:center;color:#fff;position:relative}
.book-cover img{width:100%;height:100%;object-fit:cover}
.book-info{padding:.7rem}
.book-title{font-weight:700;display:-webkit-box;-webkit-line-clamp:1;-webkit-box-orient:vertical;overflow:hidden}
.book-author{font-size:.9rem;color:var(--text-secondary)}
.badge{display:inline-block;border-radius:999px;padding:.15rem .5rem;background:var(--primary-soft);font-size:.75rem}

/* matches: títulos/autores blancos encima de portada */
#matchContainer .book-title, #matchContainer .book-author{ color:#fff!important; text-shadow:0 1px 2px rgba(0,0,0,.6); }

/* empty & toast */
.empty{border:1px dashed var(--primary-soft);border-radius:12px;padding:2rem;text-align:center;color:var(--text-secondary);background:#fff}
.empty i{font-size:2rem;margin-bottom:.5rem;color:var(--primary-wood)}
.toast{position:fixed;top:84px;left:50%;transform:translateX(-50%);background:var(--primary-wood);color:#fff;border-radius:999px;padding:.6rem 1rem;z-index:9999;box-shadow:var(--shadow);font-weight:600}
.toast.success{background:var(--success)} .toast.error{background:var(--error)} .toast.warning{background:var(--warning)}

/* modals */
.modal{position:fixed;inset:0;background:rgba(0,0,0,.35);display:none;align-items:flex-start;justify-content:center;padding:6vh var(--space);overflow-y:auto}
.modal.active{display:flex}
.modal-card{max-width:560px;width:100%;background:#fff;border-radius:14px;padding:var(--space-lg);box-shadow:var(--shadow);max-height:calc(100vh - 12vh);overflow-y:auto;-webkit-overflow-scrolling:touch}
.modal-header{display:flex;align-items:center;justify-content:space-between;margin-bottom:.75rem}
.close{background:none;border:none;font-size:1.25rem;cursor:pointer;color:var(--text-secondary)}
body.modal-open{overflow:hidden}

/* uploader */
.uploader-grid{display:grid;grid-template-columns:repeat(2,1fr);gap:.75rem;margin:.5rem 0 0}
@media(min-width:560px){ .uploader-grid{ grid-template-columns:repeat(4,1fr); } }
.upload-card{border:2px dashed var(--primary-soft);border-radius:12px;background:#fff8f1;min-height:120px;padding:.6rem;display:flex;flex-direction:column;align-items:center;justify-content:center;text-align:center;gap:.35rem;position:relative;overflow:hidden}
.upload-card.required{background:#fff3e0}
.upload-card .hint{font-size:.75rem}
.upload-card input[type=file]{display:none}
.upload-card .preview{position:absolute;inset:0;background-size:cover;background-position:center;border-radius:10px;opacity:.95;display:none}
.upload-card.has-image .preview{display:block}
.upload-card .overlay{position:absolute;inset:auto 6px 6px auto;background:rgba(0,0,0,.55);color:#fff;padding:.15rem .35rem;border-radius:8px;font-size:.7rem;display:none}
.upload-card.has-image .overlay{display:block}
.upload-card button.remove{position:absolute;top:6px;right:6px;background:#fff;border:1px solid var(--primary-soft);border-radius:10px;width:28px;height:28px;display:grid;place-items:center;cursor:pointer}

/* password helpers */
.password-wrap{ position:relative; }
.password-wrap .toggle-eye{ position:absolute; right:.6rem; top:50%; transform:translateY(-50%); border:1px solid var(--primary-soft); background:#fff; width:34px; height:34px; border-radius:8px; display:grid; place-items:center; cursor:pointer; color:var(--text-secondary); }
.pw-hint{ font-size:.8rem; color:var(--text-hint); margin-top:.35rem; }
.pw-checklist{ margin:.35rem 0 0; padding:0; list-style:none; font-size:.85rem; }
.pw-checklist li{ display:flex; align-items:center; gap:.4rem; color:#9a877a; }
.pw-checklist li.ok{ color:#4c8b4c; }
.pw-checklist i{ width:16px; text-align:center; }

/* placeholders más contrastados */
.form-input::placeholder,.form-textarea::placeholder{ color:#b49a8b; opacity:1; }

/* Miniaturas del HISTORIAL (tamaño fijo y clicables) */
.hist-thumb{
  width:72px;
  height:104px;
  border-radius:8px;
  background:var(--primary-soft);
  display:inline-grid;
  place-items:center;
  overflow:hidden;
  object-fit:cover;            /* funciona cuando es <img class="hist-thumb" loading="lazy"> */
  box-shadow:var(--shadow);
}
.hist-thumb i{ color:var(--text-hint); font-size:1rem; }
.hist-thumb.clickable{ cursor:pointer; transition:transform .15s; }
.hist-thumb.clickable:hover{ transform:translateY(-2px); }

/* Links dentro del historial */
#profileHistory a{ color:var(--primary-wood); text-decoration:underline; }

/* Asegura que el contenedor alinee bien las miniaturas y textos */
#profileHistory .hist-row{ display:flex; gap:.75rem; align-items:center; }

/* Exchange card styles */
.exchange-card{
  background:#fff;
  border:1px solid var(--primary-soft);
  border-radius:12px;
  padding:1rem;
  margin-bottom:.75rem;
  box-shadow:var(--shadow);
}

.zone-badge{
  display:inline-block;
  background:var(--primary-accent);
  color:#fff;
  padding:.25rem .5rem;
  border-radius:999px;
  font-size:.75rem;
  font-weight:600;
}
</style>
</head>
<body>

<!-- AUTH -->
<div id="auth" class="auth-wrapper">
  <div class="auth-card">
    <h2 class="auth-title"><i class="fas fa-book-open"></i> Intercambio Libros Madrid</h2>

    <!-- LOGIN -->
    <div id="loginView">
      <form onsubmit="Auth.handleLogin(); return false;">
        <div class="form-group">
          <label class="form-label">Email</label>
          <input id="loginEmail" type="email" class="form-input" autocomplete="email" placeholder="tucorreo@dominio.com">
        </div>

        <div class="form-group">
          <label class="form-label">Contraseña</label>
          <div class="password-wrap">
            <input id="loginPassword" type="password" class="form-input" autocomplete="current-password" placeholder="********">
            <button type="button" class="toggle-eye" onclick="PasswordUI.toggle('loginPassword', this)"><i class="far fa-eye"></i></button>
          </div>
          <div class="pw-hint">Mín. 8 caracteres. Mejor con mayúscula, minúscula, número y símbolo.</div>
        </div>

        <button id="loginBtn" type="submit" class="btn btn-primary" style="width:100%"><i class="fas fa-sign-in-alt"></i> Iniciar sesión</button>
      </form>

      <div class="divider"></div>
      <div class="oauth-row">
        <button id="googleBtn" class="oauth-btn" onclick="Auth.handleOAuth('google')"><i class="fab fa-google"></i> Google</button>
        <button id="appleBtn"  class="oauth-btn" onclick="Auth.handleOAuth('apple')"><i class="fab fa-apple"></i> Apple</button>
      </div>
      <div style="display:flex;justify-content:space-between;margin-top:var(--space)">
        <button class="btn-text" onclick="Views.show('resetView')">¿Olvidaste la contraseña?</button>
        <button class="btn-text" onclick="Views.show('signupView')">Crear cuenta</button>
      </div>
    </div>

    <!-- SIGNUP -->
    <div id="signupView" style="display:none">
      <form onsubmit="Auth.handleSignup(); return false;">
        <div class="grid-2">
          <div class="form-group"><label class="form-label">Nombre completo</label><input id="signupName" class="form-input" placeholder="Tu nombre y apellidos"></div>
          <div class="form-group"><label class="form-label">Zona</label>
            <select id="signupZone" class="form-select">
              <option value="">Selecciona tu zona</option>
              <option value="centro">Centro</option><option value="norte">Norte</option><option value="sur">Sur</option><option value="este">Este</option><option value="oeste">Oeste</option>
            </select>
          </div>
        </div>
        <div class="form-group"><label class="form-label">Correo electrónico</label><input id="signupEmail" type="email" class="form-input" placeholder="tucorreo@dominio.com"></div>

        <div class="form-group">
          <label class="form-label">Contraseña</label>
          <div class="password-wrap">
            <input id="signupPassword" type="password" class="form-input" autocomplete="new-password" placeholder="********">
            <button type="button" class="toggle-eye" onclick="PasswordUI.toggle('signupPassword', this)"><i class="far fa-eye"></i></button>
          </div>
          <ul id="signupPwRules" class="pw-checklist">
            <li><i class="far fa-circle"></i> 8+ caracteres</li>
            <li><i class="far fa-circle"></i> Una mayúscula</li>
            <li><i class="far fa-circle"></i> Una minúscula</li>
            <li><i class="far fa-circle"></i> Un número</li>
            <li><i class="far fa-circle"></i> Un símbolo</li>
          </ul>
        </div>

        <div class="form-group">
          <label class="form-label">Repite la contraseña</label>
          <div class="password-wrap">
            <input id="signupConfirm" type="password" class="form-input" autocomplete="new-password" placeholder="********">
            <button type="button" class="toggle-eye" onclick="PasswordUI.toggle('signupConfirm', this)"><i class="far fa-eye"></i></button>
          </div>
        </div>

        <button id="signupBtn" type="submit" class="btn btn-primary" style="width:100%"><i class="fas fa-user-plus"></i> Crear cuenta</button>
      </form>
      <div style="text-align:center;margin-top:var(--space)"><button class="btn-text" onclick="Views.show('loginView')">Volver</button></div>
    </div>

    <!-- RESET -->
    <div id="resetView" style="display:none">
      <form onsubmit="Auth.handleReset(); return false;">
        <div class="form-group"><label class="form-label">Correo electrónico</label><input id="resetEmail" type="email" class="form-input" placeholder="tucorreo@dominio.com"></div>
        <button id="resetBtn" type="submit" class="btn btn-primary" style="width:100%"><i class="fas fa-envelope"></i> Enviar correo de recuperación</button>
      </form>
      <div style="text-align:center;margin-top:var(--space)"><button class="btn-text" onclick="Views.show('loginView')">Volver</button></div>
    </div>
  </div>
</div>

<!-- APP -->
<div id="app" class="app-container" style="display:none">
  <header class="app-header">
    <div class="logo"><i class="fas fa-map-marker-alt"></i><span>ILM</span></div>
    <div class="header-actions">
      <div class="points"><i class="fas fa-coins"></i> <span id="userPoints">0</span></div>
      <button class="notification-btn" onclick="UI.showNotifications()" title="Notificaciones"><i class="fas fa-bell"></i></button>
      <button class="profile-btn" onclick="Auth.handleLogout()" title="Cerrar sesión"><i class="fas fa-sign-out-alt"></i></button>
    </div>
  </header>

  <nav class="nav-tabs">
    <button class="nav-tab active" data-tab="matches"   onclick="UI.showTab('matches')"><i class="fas fa-heart"></i><span>Matches</span></button>
    <button class="nav-tab"        data-tab="library"   onclick="UI.showTab('library')"><i class="fas fa-book"></i><span>Biblioteca</span></button>
    <button class="nav-tab"        data-tab="community" onclick="UI.showTab('community')"><i class="fas fa-users"></i><span>Comunidad</span></button>
    <button class="nav-tab"        data-tab="profile"   onclick="UI.showTab('profile')"><i class="fas fa-user"></i><span>Perfil</span></button>
  </nav>

  <main class="main-content">
    <section id="matches" class="page active">
      <h3 style="margin:.25rem 0 var(--space)">Matches Disponibles</h3>
      <div id="matchContainer" class="books-grid">
        <div class="empty"><i class="fas fa-book-reader"></i><div>No hay matches todavía</div><div class="hint">Añade libros a tu biblioteca para empezar</div></div>
      </div>
    </section>

    <section id="library" class="page">
      <h3 style="margin:.25rem 0 var(--space)">Mi Biblioteca</h3>
      <button class="btn btn-primary" style="width:100%;margin-bottom:.75rem" onclick="Modals.openAddBook()"><i class="fas fa-plus"></i> Añadir libro</button>
      <div id="libraryGrid" class="books-grid"></div>
    </section>

    <section id="community" class="page">
      <h3 style="margin:.25rem 0 var(--space)">Intercambios</h3>
      <div id="exchangeList">
        <div class="empty"><i class="fas fa-handshake"></i><div>No tienes intercambios aún</div><div class="hint">Propón uno desde un libro en Matches</div></div>
      </div>
    </section>

    <section id="profile" class="page">
      <h3 style="margin:.25rem 0 var(--space)">Mi Perfil</h3>
      <div id="profileContent"></div>
      <h3 style="margin:1.25rem 0 .5rem">Historial de intercambios</h3>
      <div id="profileHistory">
        <div class="empty">
          <i class="fas fa-handshake"></i>
          <div>Aún no tienes intercambios completados</div>
        </div>
      </div>
    </section>
  </main>
</div>

<!-- Add Book Modal -->
<div id="addBookModal" class="modal">
  <div class="modal-card">
    <div class="modal-header">
      <h3><i class="fas fa-plus-circle"></i> Añadir Libro</h3>
      <button class="close" onclick="Modals.close('addBookModal')">×</button>
    </div>

    <div>
      <div class="form-group"><label class="form-label">Título</label><input id="bookTitle" class="form-input" placeholder="Ej. El puente donde habitan las mariposas"></div>
      <div class="form-group"><label class="form-label">Autor</label><input id="bookAuthor" class="form-input" placeholder="Ej. Nazareth Castellanos"></div>

      <div class="grid-2">
        <div class="form-group"><label class="form-label">ISBN (opcional)</label><input id="bookISBN" class="form-input" placeholder="Ej. 978-84-123456-7-8"></div>
        <div class="form-group">
          <label class="form-label">Género</label>
          <select id="bookGenre" class="form-select">
            <option value="">Selecciona</option>
            <option value="ficcion">Ficción</option><option value="no-ficcion">No ficción</option>
            <option value="fantasia">Fantasía</option><option value="ciencia-ficcion">Ciencia ficción</option>
            <option value="misterio">Misterio</option><option value="romance">Romance</option>
            <option value="historia">Historia</option><option value="biografia">Biografía</option>
            <option value="crecimiento-personal">Crecimiento personal</option>
          </select>
        </div>
      </div>

      <div class="form-group">
        <label class="form-label">Estado</label>
        <select id="bookCondition" class="form-select">
          <option value="">Selecciona</option>
          <option value="nuevo">Nuevo</option><option value="excelente">Excelente</option>
          <option value="bueno">Bueno</option><option value="aceptable">Ver descripción</option>
        </select>
      </div>

      <div class="form-group"><label class="form-label"><i class="fas fa-file-alt"></i> Estado interno (páginas)</label>
        <textarea id="bookInternal" class="form-textarea" placeholder="Sin subrayados, esquinas con leve desgaste..."></textarea>
      </div>

      <div class="form-group"><label class="form-label">Descripción (opcional)</label>
        <textarea id="bookDesc" class="form-textarea" placeholder="Detalles extra o qué buscas a cambio"></textarea>
      </div>

      <div class="form-group">
        <label class="form-label"><i class="fas fa-camera"></i> Fotos del libro <span class="hint">(La Cubierta es obligatoria)</span></label>
        <div class="uploader-grid">
  <!-- Cubierta -->
  <label class="upload-card required" id="up_front">
    <div class="preview"></div>
    <div>
      <div style="font-weight:700"><i class="fas fa-book"></i> Cubierta</div>
      <div class="hint">Toca para subir</div>
    </div>
    <input type="file" accept="image/*" id="file_front" required>
    <button class="remove" type="button" title="Quitar" onclick="ImageUploader.clear('front')">×</button>
    <span class="overlay">Obligatoria</span>
  </label>

  <!-- Contracubierta -->
  <label class="upload-card" id="up_back">
    <div class="preview"></div>
    <div>
      <div style="font-weight:700"><i class="fas fa-book-open"></i> Contracubierta</div>
      <div class="hint">Opcional</div>
    </div>
    <input type="file" accept="image/*" id="file_back">
    <button class="remove" type="button" title="Quitar" onclick="ImageUploader.clear('back')">×</button>
  </label>

  <!-- Lomo -->
  <label class="upload-card" id="up_spine">
    <div class="preview"></div>
    <div>
      <div style="font-weight:700"><i class="fas fa-grip-lines-vertical"></i> Lomo</div>
      <div class="hint">Opcional</div>
    </div>
    <input type="file" accept="image/*" id="file_spine">
    <button class="remove" type="button" title="Quitar" onclick="ImageUploader.clear('spine')">×</button>
  </label>

  <!-- Páginas -->
  <label class="upload-card" id="up_pages">
    <div class="preview"></div>
    <div>
      <div style="font-weight:700"><i class="fas fa-file-image"></i> Páginas</div>
      <div class="hint">Opcional</div>
    </div>
    <input type="file" accept="image/*" id="file_pages" multiple>
    <button class="remove" type="button" title="Quitar" onclick="ImageUploader.clear('pages')">×</button>
  </label>
</div>

      <button id="saveBookBtn" class="btn btn-primary" style="width:100%" onclick="Books.save()"><i class="fas fa-save"></i> Guardar libro</button>
    </div>
  </div>
</div>

<!-- Book Details Modal -->
<div id="bookDetailsModal" class="modal">
  <div class="modal-card">
    <div class="modal-header"><h3 id="bookDetailsTitle">Detalles del libro</h3><button class="close" onclick="Modals.close('bookDetailsModal')">×</button></div>
    <div id="bookDetailsBody"></div>
  </div>
</div>

<!-- Threema Config -->
<div id="threemaConfigModal" class="modal">
  <div class="modal-card">
    <div class="modal-header"><h3><i class="fas fa-message"></i> Configurar Threema</h3><button class="close" onclick="Modals.close('threemaConfigModal')">×</button></div>
    <div>
      <div class="form-group"><label class="form-label">Threema ID</label><input id="threemaId" class="form-input" maxlength="8" placeholder="A1B2C3D4"></div>
      <div class="grid-2">
        <label class="form-label"><input type="checkbox" id="notifyMatches" checked> Avisarme de matches</label>
        <label class="form-label"><input type="checkbox" id="notifyExchanges" checked> Avisarme de intercambios</label>
      </div>
      <div class="form-group"><label class="form-label"><input type="checkbox" id="notifyMessages" checked> Avisarme de mensajes</label></div>
      <button id="saveThreemaBtn" class="btn btn-primary" style="width:100%" onclick="Threema.saveConfig()"><i class="fas fa-save"></i> Guardar</button>
    </div>
  </div>
</div>

<!-- Edit Profile -->
<div id="editProfileModal" class="modal">
  <div class="modal-card">
    <div class="modal-header"><h3><i class="fas fa-user-edit"></i> Editar perfil</h3><button class="close" onclick="Modals.close('editProfileModal')">×</button></div>
    <div>
      <div class="form-group"><label class="form-label">Nombre completo</label><input id="editFullName" class="form-input"></div>
      <div class="form-group"><label class="form-label">Zona</label>
        <select id="editZone" class="form-select">
          <option value="centro">Centro</option><option value="norte">Norte</option><option value="sur">Sur</option><option value="este">Este</option><option value="oeste">Oeste</option>
        </select>
      </div>
      <button id="saveProfileBtn" class="btn btn-primary" style="width:100%" onclick="Profile.saveEdit()"><i class="fas fa-save"></i> Guardar cambios</button>
    </div>
  </div>
</div>

<!-- Password Reset Modal -->
<div id="passwordResetModal" class="modal">
  <div class="modal-card">
    <div class="modal-header"><h3><i class="fas fa-key"></i> Cambiar contraseña</h3>
      <button class="close" onclick="document.getElementById('passwordResetModal').classList.remove('active');document.body.classList.remove('modal-open');">×</button>
    </div>
    <form onsubmit="Auth.saveNewPassword(); return false;">
      <div class="form-group">
        <label class="form-label">Nueva contraseña</label>
        <div class="password-wrap">
          <input id="newPassword" type="password" class="form-input" placeholder="********" autocomplete="new-password">
          <button type="button" class="toggle-eye" onclick="PasswordUI.toggle('newPassword', this)"><i class="far fa-eye"></i></button>
        </div>
        <ul id="resetPwRules" class="pw-checklist">
          <li><i class="far fa-circle"></i> 8+ caracteres</li>
          <li><i class="far fa-circle"></i> Una mayúscula</li>
          <li><i class="far fa-circle"></i> Una minúscula</li>
          <li><i class="far fa-circle"></i> Un número</li>
          <li><i class="far fa-circle"></i> Un símbolo</li>
        </ul>
      </div>
      <div class="form-group">
        <label class="form-label">Repite la contraseña</label>
        <div class="password-wrap">
          <input id="confirmPassword" type="password" class="form-input" placeholder="********" autocomplete="new-password">
          <button type="button" class="toggle-eye" onclick="PasswordUI.toggle('confirmPassword', this)"><i class="far fa-eye"></i></button>
        </div>
      </div>
      <button id="saveNewPasswordBtn" type="submit" class="btn btn-primary" style="width:100%"><i class="fas fa-save"></i> Guardar nueva contraseña</button>
    </form>
  </div>
</div>

<!-- Exchange Modal -->
<div id="exchangeModal" class="modal">
  <div class="modal-card">
    <div class="modal-header"><h3><i class="fas fa-handshake"></i> Proponer intercambio</h3><button class="close" onclick="Modals.close('exchangeModal')">×</button></div>
    <div>
      <div class="form-group"><label class="form-label">Tu libro para ofrecer</label><select id="offerBookSelect" class="form-select"></select></div>
      <div class="form-group"><label class="form-label">Mensaje (opcional)</label><textarea id="exchangeNote" class="form-textarea" placeholder="Hola, me interesa tu libro..."></textarea></div>
      <div class="form-group">
        <label class="form-label"><input id="oneSided" type="checkbox"> Intercambio <strong>sin recibir libro</strong> (donación)</label>
        <div class="hint">Tu libro se entregará a la otra persona y no recibirás otro a cambio.</div>
      </div>
      <div class="grid-2">
        <div class="form-group"><label class="form-label">Lugar (opcional)</label><input id="exchangePlace" class="form-input" placeholder="Metro Sol, cafetería..."></div>
        <div class="form-group"><label class="form-label">Fecha y hora (opcional)</label><input id="exchangeTime" type="datetime-local" class="form-input"></div>
      </div>
      <button id="createExchangeBtn" class="btn btn-primary" style="width:100%" onclick="Exchange.create()"><i class="fas fa-paper-plane"></i> Enviar propuesta</button>
    </div>
  </div>
</div>

<script>
/* ===== CONFIG ===== */
const SUPABASE_URL = "SUPABASE_URL"; // ⚠️ REEMPLAZA CON TU URL REAL
const SUPABASE_ANON_KEY = "SUPABASE_ANON_KEY"; // ⚠️ REEMPLAZA CON TU CLAVE REAL
const SOCIAL_LOGIN_ENABLED = { google:true, apple:true };

// Global variables
let supabaseClient = null;
let currentUser = null;
let userBooks = [];
let matches = [];
let didBootstrap = false;

// Helper functions first
function toggleAuthViews(loggedIn) {
  const authEl = document.getElementById('auth');
  const appEl = document.getElementById('app');
  if (authEl) authEl.style.display = loggedIn ? 'none' : 'grid';
  if (appEl) appEl.style.display = loggedIn ? 'block' : 'none';
}

async function bootstrapAfterLogin() {
  if (didBootstrap) return;
  didBootstrap = true;
  
  try {
    if (window.Profile && typeof Profile.load === 'function') await Profile.load();
    if (window.Books && typeof Books.loadMine === 'function') await Books.loadMine();
    if (window.Matches && typeof Matches.load === 'function') await Matches.load();
  } catch (e) {
    console.warn('Bootstrap error:', e);
  }
}

// Initialize Supabase
function initializeSupabase() {
  try {
    if (!window.supabase) {
      console.error('Supabase library not loaded');
      return false;
    }
    
    supabaseClient = window.supabase.createClient(
      SUPABASE_URL,
      SUPABASE_ANON_KEY,
      {
        auth: {
          persistSession: true,
          autoRefreshToken: true,
          detectSessionInUrl: true
        }
      }
    );
    return true;
  } catch (error) {
    console.error('Failed to initialize Supabase:', error);
    return false;
  }
}

// Auth state management
async function setupAuthStateListener() {
  if (!supabaseClient) return;
  
  try {
    // Initial session
    const { data: { session }, error } = await supabaseClient.auth.getSession();
    if (error) console.warn('getSession:', error);
    
    currentUser = session?.user || null;
    toggleAuthViews(!!currentUser);
    if (currentUser) bootstrapAfterLogin();

    // Auth state changes
    supabaseClient.auth.onAuthStateChange((event, session) => {
      currentUser = session?.user || null;

      if (event === 'PASSWORD_RECOVERY') {
        if (window.Auth) {
          Auth._recovery = true;
          toggleAuthViews(false);
          Auth.showPasswordResetModal();
        }
        return;
      }

      toggleAuthViews(!!currentUser);

      if (currentUser && (
          event === 'SIGNED_IN' ||
          event === 'TOKEN_REFRESHED' ||
          event === 'USER_UPDATED' ||
          event === 'INITIAL_SESSION'
      )) {
        bootstrapAfterLogin();
      }

      if (!currentUser && event === 'SIGNED_OUT') {
        didBootstrap = false;
      }
    });
  } catch (error) {
    console.error('Auth setup error:', error);
  }
}

// UI Helper functions
const Views = { 
  show(id) { 
    try {
      ['loginView','signupView','resetView'].forEach(v => {
        const el = document.getElementById(v);
        if (el) el.style.display = (v === id ? 'block' : 'none');
      }); 
    } catch (e) {
      console.error('Views.show error:', e);
    }
  } 
};

const toast = (type, message) => {
  try {
    const notification = document.createElement('div'); 
    notification.className = `toast ${type}`; 
    notification.textContent = message; 
    document.body.appendChild(notification); 
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 3000); 
  } catch (e) {
    console.error('Toast error:', e);
  }
};

const showNotification = (type, message) => toast(type, message);

// Input validation utilities
const InputSanitizer = {
  sanitizeText: (str) => {
    try {
      return (typeof str === 'string' ? str : '').trim().replace(/[<>"'&]/g, '').slice(0, 1000);
    } catch (e) {
      return '';
    }
  },
  sanitizeEmail: (str) => {
    try {
      return (typeof str === 'string' ? str : '').trim().toLowerCase().replace(/[<>"'&]/g, '').slice(0, 320);
    } catch (e) {
      return '';
    }
  },
  isValidEmail: (str) => {
    try {
      return /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(str || '');
    } catch (e) {
      return false;
    }
  }
};

const UI = {
  showTab(id) {
    try {
      document.querySelectorAll('.page').forEach(p => p.classList.remove('active'));
      const targetPage = document.getElementById(id);
      if (targetPage) targetPage.classList.add('active');
      
      document.querySelectorAll('.nav-tab').forEach(b => 
        b.classList.toggle('active', b.dataset.tab === id)
      );
      
      if (id === 'library' && window.Books) Books.loadMine();
      if (id === 'matches' && window.Matches) Matches.load();
      if (id === 'community' && window.Exchange) Exchange.list();
      if (id === 'profile' && window.Profile) { 
        Profile.load(); 
        Profile.loadHistory(); 
      }
    } catch (e) {
      console.error('UI.showTab error:', e);
    }
  },
  showNotifications() { 
    showNotification('info', 'No tienes notificaciones nuevas'); 
  }
};

const Modals = { 
  openAddBook() { 
    try {
      const modal = document.getElementById('addBookModal');
      if (modal) {
        modal.classList.add('active'); 
        document.body.classList.add('modal-open');
        if (window.ImageUploader) {
          ImageUploader.bind(); 
          ImageUploader.reset();
        }
      }
    } catch (e) {
      console.error('Modals.openAddBook error:', e);
    }
  }, 
  close(id) { 
    try {
      const modal = document.getElementById(id);
      if (modal) modal.classList.remove('active'); 
      if (!document.querySelector('.modal.active')) {
        document.body.classList.remove('modal-open'); 
      }
    } catch (e) {
      console.error('Modals.close error:', e);
    }
  }
};

/* ===== Password rules/UI ===== */
const PasswordRules = {
  test(pw){ return { len:pw.length>=8, up:/[A-ZÀÁÉÍÓÚÜ]/.test(pw), lo:/[a-zàáéíóúñ]/.test(pw), di:/\d/.test(pw), sy:/[^A-Za-z0-9]/.test(pw) }; },
  isStrong(pw){ const t=this.test(pw); return t.len && t.up && t.lo && t.di && t.sy; },
  message(pw){ const t=this.test(pw); if(!t.len) return 'La contraseña debe tener al menos 8 caracteres'; if(!t.up) return 'Añade al menos una mayúscula'; if(!t.lo) return 'Añade al menos una minúscula'; if(!t.di) return 'Añade al menos un número'; if(!t.sy) return 'Añade al menos un símbolo'; return 'La contraseña no cumple los requisitos'; }
};
const PasswordUI = {
  toggle(inputId, btn){ const el=document.getElementById(inputId); if(!el) return; el.type=(el.type==='password'?'text':'password'); btn.querySelector('i').className=(el.type==='password'?'far fa-eye':'far fa-eye-slash'); },
  attachChecklist(inputId, listId){ const input=document.getElementById(inputId), list=document.getElementById(listId); if(!input||!list) return; const items=[...list.querySelectorAll('li')], icons=[...list.querySelectorAll('li i')]; const paint=()=>{ const t=PasswordRules.test(input.value); [t.len,t.up,t.lo,t.di,t.sy].forEach((v,i)=>{ items[i].classList.toggle('ok',v); icons[i].className=v?'fas fa-check-circle':'far fa-circle'; }); }; input.addEventListener('input',paint); paint(); }
};
document.addEventListener('DOMContentLoaded',()=>{ PasswordUI.attachChecklist('signupPassword','signupPwRules'); PasswordUI.attachChecklist('newPassword','resetPwRules'); });

/* ===== Threema ===== */
const Threema={
  config: JSON.parse(localStorage.getItem('threemaConfig')||'{"id":"","notifications":{"matches":true,"exchanges":true,"messages":true},"connected":false}'),
  save(v){ this.config=v; localStorage.setItem('threemaConfig', JSON.stringify(v)); },
  openConfig(){
    document.getElementById('threemaId').value = this.config.id||'';
    document.getElementById('notifyMatches').checked=!!this.config.notifications?.matches;
    document.getElementById('notifyExchanges').checked=!!this.config.notifications?.exchanges;
    document.getElementById('notifyMessages').checked=!!this.config.notifications?.messages;
    document.getElementById('threemaConfigModal').classList.add('active'); document.body.classList.add('modal-open');
  },
  async saveConfig(){
    const id=(document.getElementById('threemaId').value||'').trim().toUpperCase();
    if(id.length!==8){ showNotification('warning','Introduce un Threema ID válido'); return; }
    this.save({ id, notifications:{ matches:document.getElementById('notifyMatches').checked, exchanges:document.getElementById('notifyExchanges').checked, messages:document.getElementById('notifyMessages').checked }, connected:true });
    try{ if(currentUser) await supabaseClient.from('profiles').update({threema_id:id,threema_notifications:this.config.notifications}).eq('id',currentUser.id); showNotification('success','Threema guardado'); Modals.close('threemaConfigModal'); Profile.load(); }catch(_){ showNotification('error','No se pudo guardar'); }
  },
  message(targetId,text){ window.open(`threema://add?id=${encodeURIComponent(targetId)}&text=${encodeURIComponent(text)}`,'_blank'); showNotification('info','Abriendo Threema…'); }
};

/* ===== Uploader (Storage/books) ===== */
const ImageUploader = {
  files: { front:null, back:null, spine:null, pages:null },
  
  bind(){
    console.log('Binding image uploader...'); // Debug
    const map = {
      front: document.querySelector('#file_front'),
      back:  document.querySelector('#file_back'),
      spine: document.querySelector('#file_spine'),
      pages: document.querySelector('#file_pages')
    };
    
    Object.entries(map).forEach(([key, input]) => {
      if(!input) {
        console.error(`Input not found for ${key}`);
        return;
      }
      
      input.onchange = (e) => {
        const f = e.target.files?.[0] || null;
        console.log(`File selected for ${key}:`, f?.name); // Debug
        
        if(!f){ 
          this.clear(key); 
          return; 
        }
        
        // Store file
        this.files[key] = f;
        
        // Update UI
        const card = document.getElementById('up_'+key);
        if(card) {
          card.classList.add('has-image');
          const prev = card.querySelector('.preview');
          if(prev) {
            const reader = new FileReader();
            reader.onload = ev => { 
              prev.style.backgroundImage = `url('${ev.target.result}')`; 
            };
            reader.readAsDataURL(f);
          }
        }
      };
      
      // Click handler for card
      const card = document.getElementById('up_'+key);
      if(card) {
        card.addEventListener('click', (ev) => {
          if(ev.target.tagName === 'BUTTON') return;
          input.click();
        });
      }
    });
  },
  
  clear(key){
    console.log(`Clearing ${key}`); // Debug
    this.files[key] = null;
    const card = document.getElementById('up_'+key);
    if(!card) return;
    
    card.classList.remove('has-image');
    const input = document.getElementById(`file_${key}`);
    if(input) input.value = '';
    const prev = card.querySelector('.preview'); 
    if(prev) prev.style.backgroundImage = 'none';
  },
  
  reset(){ 
    console.log('Resetting uploader'); // Debug
    ['front','back','spine','pages'].forEach(k => this.clear(k)); 
  },
  
  async uploadImageToBooksBucket(kind, file) {
    if(!file) return null;
    if(!supabaseClient) throw new Error('Supabase no inicializado');
    
    console.log(`Uploading ${kind}:`, file.name); // Debug
    
    const uid = currentUser?.id || 'anon';
    const ext = (file.name?.split('.').pop() || 'jpg').toLowerCase();
    const path = `${uid}/${Date.now()}-${kind}.${ext}`;

    const { error: upErr } = await supabaseClient.storage
      .from('books')
      .upload(path, file, {
        cacheControl: '3600',
        upsert: false,
        contentType: file.type || 'image/jpeg'
      });
      
    if(upErr) {
      console.error(`Upload error for ${kind}:`, upErr);
      throw upErr;
    }

    const { data } = supabaseClient.storage.from('books').getPublicUrl(path);
    console.log(`Upload successful for ${kind}:`, data?.publicUrl); // Debug
    return data?.publicUrl || null;
  }
};

/* ===== Books ===== */
const Books={
  async save(){
    if(!currentUser) return showNotification('error','No autenticado');
    
    const title = InputSanitizer.sanitizeText(document.getElementById('bookTitle').value);
    const author = InputSanitizer.sanitizeText(document.getElementById('bookAuthor').value);
    const isbn = InputSanitizer.sanitizeText(document.getElementById('bookISBN').value);
    const genre = document.getElementById('bookGenre').value;
    const condition = document.getElementById('bookCondition').value;
    const internal_condition = InputSanitizer.sanitizeText(document.getElementById('bookInternal').value);
    const description = InputSanitizer.sanitizeText(document.getElementById('bookDesc').value);
    
    if(!title||!author||!genre||!condition) return showNotification('warning','Completa título, autor, género y estado');
    if(!ImageUploader.files.front) return showNotification('warning','La foto de cubierta es obligatoria');

    const btn = document.getElementById('saveBookBtn'); 
    btn.disabled = true; 
    btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Guardando…';
    
    try{
      console.log('Starting book save process...');
      
      // 1. Get user zone
      const { data: prof } = await supabaseClient.from('profiles').select('zone').eq('id',currentUser.id).single();
      const zone = prof?.zone || 'centro';
      
      // 2. Generate book ID
      const bookId = (crypto && crypto.randomUUID) ? crypto.randomUUID() : String(Date.now());
      console.log('Generated book ID:', bookId);
      
      // 3. Upload images FIRST
      console.log('Uploading images...');
      let front_url = null, back_url = null, spine_url = null, pages_url = null;
      
      try {
        if(ImageUploader.files.front) {
          front_url = await ImageUploader.uploadImageToBooksBucket('front', ImageUploader.files.front);
          console.log('Front URL:', front_url);
        }
        if(ImageUploader.files.back) {
          back_url = await ImageUploader.uploadImageToBooksBucket('back', ImageUploader.files.back);
        }
        if(ImageUploader.files.spine) {
          spine_url = await ImageUploader.uploadImageToBooksBucket('spine', ImageUploader.files.spine);
        }
        if(ImageUploader.files.pages) {
          pages_url = await ImageUploader.uploadImageToBooksBucket('pages', ImageUploader.files.pages);
        }
      } catch(uploadError) {
        console.error('Image upload error:', uploadError);
        throw new Error('Error al subir las imágenes: ' + uploadError.message);
      }
      
      // 4. Insert book with image URLs
      console.log('Inserting book into database...');
      const bookData = {
        id: bookId,
        user_id: currentUser.id,
        title,
        author,
        isbn,
        genre,
        condition,
        internal_condition,
        description,
        zone,
        is_available: true,
        front_url,
        back_url,
        spine_url,
        pages_url
      };
      
      console.log('Book data:', bookData);
      
      const { data, error } = await supabaseClient
        .from('books')
        .insert([bookData])
        .select('*')
        .single();

      if(error) {
        console.error('Database insert error:', error);
        throw error;
      }
      
      console.log('Book saved successfully:', data);
      
      showNotification('success','¡Libro guardado!'); 
      Modals.close('addBookModal'); 
      await Books.loadMine(); 
      UI.showTab('library');
      
    } catch(e) { 
      console.error('Save book error:', e);
      showNotification('error', e.message || 'No se pudo guardar el libro'); 
    } finally { 
      btn.disabled = false; 
      btn.innerHTML = '<i class="fas fa-save"></i> Guardar libro'; 
    }
  },

  card(b){
    console.log('Rendering book card:', b); // Debug
    const imageUrl = b.front_url;
    console.log('Image URL for', b.title, ':', imageUrl); // Debug
    
    return `<div class="book-card" onclick="Books.open('${b.id}')">
      <div class="book-cover">
        ${imageUrl ? `<img src="${imageUrl}" alt="${b.title}" onerror="console.error('Image failed to load:', this.src)" loading="lazy">` : '<i class="fas fa-book"></i>'}
      </div>
      <div class="book-info">
        <div class="book-title" title="${b.title}">${b.title}</div>
        <div class="book-author">${b.author}</div>
        <div class="badge">${(b.condition||'').toUpperCase()}</div>
      </div>
    </div>`;
  },

  async loadMine(){
    if(!currentUser) return;
    const grid = document.getElementById('libraryGrid');
    console.log('Loading user books...'); // Debug
    
    try{
      const { data, error } = await supabaseClient
        .from('books')
        .select('*')
        .eq('user_id', currentUser.id)
        .eq('is_available', true)
        .order('created_at', {ascending: false});
        
      if(error) throw error;
      
      console.log('Loaded books:', data); // Debug
      userBooks = data || [];
      
      grid.innerHTML = userBooks.length 
        ? userBooks.map(Books.card).join('') 
        : '<div class="empty"><i class="fas fa-book"></i><div>Sin libros aún</div></div>';
        
    } catch(err) { 
      console.error('loadMine error:', err); // Debug
      grid.innerHTML = '<div class="empty">Error al cargar tu biblioteca</div>'; 
    }
  },

  async open(id){
    let book = (userBooks||[]).find(x=>x.id===id) || (matches||[]).find(x=>x.id===id);
    if(!book){
      try{ const { data } = await supabaseClient.from('books').select('*').eq('id', id).maybeSingle(); book=data||null; }
      catch(_){ book=null; }
    }
    if(!book){ showNotification('error','No se pudo cargar el libro'); return; }

    document.getElementById('bookDetailsTitle').textContent=book.title;
    const canExchange = (book.is_available!==false) && (book.user_id!==currentUser?.id);
    const exchangeBtn = canExchange
      ? `<button class="btn btn-primary" onclick="Matches.startExchange('${book.id}')"><i class="fas fa-handshake"></i> Proponer intercambio</button>`
      : `<button class="btn btn-secondary" disabled><i class="fas fa-ban"></i> No disponible</button>`;

    document.getElementById('bookDetailsBody').innerHTML = `
      ${book.front_url?`<img src="${book.front_url}" style="width:100%;border-radius:10px;margin-bottom:1rem" loading="lazy">`:''}
      <div style="margin-bottom:.5rem"><strong>Autor:</strong> ${book.author||'—'}</div>
      ${book.isbn?`<div style="margin-bottom:.5rem"><strong>ISBN:</strong> ${book.isbn}</div>`:''}
      <div style="margin-bottom:.5rem"><strong>Género:</strong> ${book.genre||'—'}</div>
      <div style="margin-bottom:.5rem"><strong>Estado:</strong> ${book.condition||'—'}</div>
      ${book.internal_condition?`<div style="margin-bottom:.5rem"><strong>Páginas:</strong> ${book.internal_condition}</div>`:''}
      ${book.description?`<div style="margin-bottom:.5rem"><strong>Descripción:</strong> ${book.description}</div>`:''}
      <div style="margin-bottom:1rem"><span class="zone-badge">${(book.zone||'').toUpperCase()}</span></div>
      <div style="display:flex;gap:.5rem">
        <button class="btn btn-secondary" onclick="Matches.contactOwner('${book.user_id}','${(book.title||'').replace(/'/g,'&#39;')}')"><i class="fas fa-message"></i> Contactar</button>
        ${exchangeBtn}
      </div>`;
    document.getElementById('bookDetailsModal').classList.add('active'); document.body.classList.add('modal-open');
  }
};

/* ===== Matches ===== */
const Matches={
  async load(){
    if(!currentUser) return;
    const container=document.getElementById('matchContainer');
    try{
      const { data: profile } = await supabaseClient.from('profiles').select('zone').eq('id',currentUser.id).single();
      const { data: myBooks } = await supabaseClient.from('books').select('genre,title,author').eq('user_id',currentUser.id);

      let all=[];
      try{
        const res=await supabaseClient.from('books').select('*').eq('is_available',true).neq('user_id',currentUser.id).order('created_at',{ascending:false}).limit(50);
        if(res.error) throw res.error; all=res.data||[];
      }catch(_){
        const res=await supabaseClient.from('books').select('*').neq('user_id',currentUser.id).order('created_at',{ascending:false}).limit(50);
        all=res.data||[];
      }

      const zone=profile?.zone||'centro';
      const keywords=new Set();
      (myBooks||[]).forEach(b=>{
        (`${b.title} ${b.author}`).toLowerCase().split(/\s+/).filter(w=>w.length>3).forEach(w=>keywords.add(w));
        if(b.genre) keywords.add(b.genre);
      });

      const scored=(all||[]).map(b=>{
        let score=0;
        score += (b.zone===zone?100:(!b.zone||b.zone==='centro'?50:20));
        if((myBooks||[]).map(x=>x.genre).filter(Boolean).includes(b.genre)) score+=80;
        const text=`${b.title} ${b.author} ${b.description||''}`.toLowerCase();
        keywords.forEach(k=>{ if(text.includes(String(k).toLowerCase())) score+=60; });
        const days=(Date.now()-new Date(b.created_at))/86400000; if(days<7) score+=30; else if(days<30) score+=15;
        if(['nuevo','excelente'].includes(b.condition)) score+=40;
        return {...b, compatibility_score:score};
      }).sort((a,b)=>b.compatibility_score-a.compatibility_score).slice(0,20);

      matches=scored;
      container.innerHTML = matches.length ? matches.map(Books.card).join('')
        : '<div class="empty"><i class="fas fa-book-reader"></i><div>No hay matches disponibles</div><div class="hint">Añade más libros para encontrar coincidencias</div></div>';
    }catch(_){ container.innerHTML='<div class="empty">Error al cargar matches</div>'; }
  },

  startExchange(bookId){
    const book = matches.find(b=>b.id===bookId) || userBooks.find(b=>b.id===bookId);
    if(!currentUser) return showNotification('info','Inicia sesión para proponer intercambios');
    Exchange.open(bookId, book?.user_id);
  },

  async contactOwner(ownerUserId, bookTitle){
    try{
      const { data: prof } = await supabaseClient.from('profiles').select('threema_id, full_name').eq('id',ownerUserId).single();
      const targetId=(prof?.threema_id||'').trim().toUpperCase();
      if(!targetId){ showNotification('warning','La otra persona aún no ha configurado su Threema'); return; }
      const myName=(currentUser?.user_metadata?.full_name||currentUser?.user_metadata?.name||'un lector');
      const msg=`Hola, soy ${myName}. Me interesa tu libro "${bookTitle}". ¿Intercambiamos?`;
      Threema.message(targetId, msg);
    }catch(_){ showNotification('error','No se pudo abrir Threema'); }
  }
};

/* ===== Exchange ===== */
const Exchange={
  targetBook:null,
  statusLabel(s){ const m={proposed:'Propuesto',accepted:'Aceptado',declined:'Rechazado',cancelled:'Cancelado',completed:'Completado'}; return (m[s]||s||'').toUpperCase(); },

  open(requestedBookId, ownerId){
    if(!currentUser) return;
    this.targetBook={id:requestedBookId, owner_id:ownerId};
    const select=document.getElementById('offerBookSelect');
    const mine=(userBooks||[]).filter(b=>b.is_available!==false);
    select.innerHTML = mine.length ? mine.map(b=>`<option value="${b.id}">${b.title} — ${b.author}</option>`).join('') : '<option value="">No tienes libros disponibles aún</option>';
    document.getElementById('exchangeNote').value=''; document.getElementById('exchangePlace').value=''; document.getElementById('exchangeTime').value='';
    document.getElementById('oneSided').checked=false;
    document.getElementById('exchangeModal').classList.add('active'); document.body.classList.add('modal-open');
  },

  async create(){
    const btn=document.getElementById('createExchangeBtn'); if(!this.targetBook) return;
    const offeredId=document.getElementById('offerBookSelect').value; if(!offeredId) return showNotification('warning','Selecciona el libro que ofreces');
    btn.disabled=true; btn.innerHTML='<i class="fas fa-spinner fa-spin"></i> Enviando…';
    try{
      let ownerId=this.targetBook.owner_id;
      if(!ownerId){ const { data:b }=await supabaseClient.from('books').select('user_id').eq('id',this.targetBook.id).single(); ownerId=b?.user_id; }
      const payload={
        requested_book_id:this.targetBook.id,
        offered_book_id:offeredId,
        owner_id:ownerId,
        requester_id:currentUser.id,
        note:InputSanitizer.sanitizeText(document.getElementById('exchangeNote').value),
        meeting_place:InputSanitizer.sanitizeText(document.getElementById('exchangePlace').value),
        meeting_time:(document.getElementById('exchangeTime').value?new Date(document.getElementById('exchangeTime').value).toISOString():null),
        one_sided: document.getElementById('oneSided').checked
      };
      const { error }=await supabaseClient.from('exchanges').insert([payload]); if(error) throw error;
      showNotification('success','Propuesta enviada'); Modals.close('exchangeModal'); this.list();
    }catch(e){ showNotification('error', e.message||'No se pudo crear la propuesta'); }
    finally{ btn.disabled=false; btn.innerHTML='<i class="fas fa-paper-plane"></i> Enviar propuesta'; }
  },

  async list(){
    if(!currentUser) return;
    const el=document.getElementById('exchangeList'); el.innerHTML='<div class="hint">Cargando…</div>';
    try{
      const { data, error } = await supabaseClient
        .from('exchanges')
        .select('id,status,note,meeting_place,meeting_time,created_at,owner_id,requester_id,owner_confirmed,requester_confirmed,completed_at,one_sided,requested_book_id,offered_book_id')
        .or(`owner_id.eq.${currentUser.id},requester_id.eq.${currentUser.id}`)
        .neq('status','completed')
        .order('created_at',{ascending:false});
      if(error) throw error;
      el.innerHTML=(data||[]).length?data.map(ex=>this.card(ex)).join(''):'<div class="empty"><i class="fas fa-handshake"></i><div>No tienes intercambios activos</div></div>';
    }catch(_){ el.innerHTML='<div class="empty">No se pudieron cargar los intercambios</div>'; }
  },

  card(ex){
    const isRequester = ex.requester_id===currentUser.id;
    const when = ex.meeting_time ? new Date(ex.meeting_time).toLocaleString() : 'Sin fecha';
    const youConf   = isRequester ? ex.requester_confirmed : ex.owner_confirmed;
    const otherConf = isRequester ? ex.owner_confirmed     : ex.requester_confirmed;

    let actions='';
    if(ex.status==='proposed'){
      actions = isRequester
        ? `<button class="btn btn-secondary" onclick="Exchange.updateStatus('${ex.id}','cancelled')">Cancelar</button>`
        : `<button class="btn btn-primary" onclick="Exchange.updateStatus('${ex.id}','accepted')">Aceptar</button>
           <button class="btn btn-secondary" onclick="Exchange.updateStatus('${ex.id}','declined')">Rechazar</button>`;
    }else if(ex.status==='accepted'){
      if(youConf && otherConf) actions='<span class="hint">Ambos confirmaron</span>';
      else if(youConf && !otherConf) actions='<span class="hint">Ya confirmaste. Esperando a la otra persona…</span>';
      else actions = `<button class="btn btn-primary" onclick="Exchange.confirm('${ex.id}')"><i class="fas fa-check"></i> Confirmar intercambio</button>`;
    }

    return `
      <div class="exchange-card">
        <div style="margin-bottom:.25rem"><span class="badge">${this.statusLabel(ex.status)}</span> ${ex.one_sided?'<span class="badge" style="background:#E9D5D5;color:#7A3030;margin-left:.25rem">DONACIÓN</span>':''}</div>
        <div class="hint">Lugar: ${ex.meeting_place||'—'} · Fecha: ${when}</div>
        ${ex.note?`<div style="margin-top:.25rem">${ex.note}</div>`:''}
        ${ex.status==='accepted'?`<div class="hint" style="margin-top:.25rem">Confirmaciones: tú ${youConf?'✓':'—'} · otra persona ${otherConf?'✓':'—'}</div>`:''}
        <div style="display:flex;gap:.5rem;margin-top:.5rem">${actions}</div>
      </div>`;
  },

  async updateStatus(id,status){
    try{
      if(status==='completed') return this.confirm(id);
      const { error } = await supabaseClient.from('exchanges').update({status}).eq('id',id);
      if(error) throw error;
      if(status==='accepted') showNotification('success','Intercambio aceptado. Confirma cuando lo realicéis.');
      if(status==='declined') showNotification('info','Has rechazado la propuesta.');
      if(status==='cancelled') showNotification('info','Has cancelado la propuesta.');
      this.list();
    }catch(_){ showNotification('error','No se pudo actualizar el intercambio'); }
  },

  async confirm(id){
    try{
      const { data: ex1 } = await supabaseClient.from('exchanges').select('owner_id,requester_id').eq('id',id).single();
      const isOwner = ex1.owner_id===currentUser.id;
      const patch = {}; patch[isOwner?'owner_confirmed':'requester_confirmed']=true;
      await supabaseClient.from('exchanges').update(patch).eq('id',id);

      const { data: ex2 } = await supabaseClient.from('exchanges').select('*').eq('id',id).single();
      if(!(ex2.owner_confirmed && ex2.requester_confirmed) || ex2.status==='completed'){ this.list(); return; }

      const nowIso = new Date().toISOString();

      if(ex2.one_sided){
        await supabaseClient.from('books').update({is_available:false,exchanged_at:nowIso}).eq('id',ex2.offered_book_id);
      }else{
        await supabaseClient.from('books').update({is_available:false,exchanged_at:nowIso}).in('id',[ex2.requested_book_id,ex2.offered_book_id]);
      }

      if(ex2.one_sided){
showNotification('success','¡Donación completada! Has ganado 50 puntos');
      }else{
showNotification('success','¡Intercambio completado! Ambos ganan 50 puntos');
      }

      await Books.loadMine(); await Matches.load(); await this.list(); await Profile.loadHistory();
    }catch(e){ showNotification('error', e.message||'No se pudo confirmar'); }
  }
};

/* ===== Points ===== */
const PointsSystem={
  async award(userId,action,pts=20){
    try{
      await supabaseClient.from('points_transactions').insert([{user_id:userId,action_type:action,points:pts}]);
      const { data:prof } = await supabaseClient.from('profiles').select('total_points').eq('id',userId).single();
      const total=(prof?.total_points||0)+pts;
      await supabaseClient.from('profiles').update({total_points:total}).eq('id',userId);
      if(userId===currentUser?.id) document.getElementById('userPoints').textContent=total;
    }catch(_){}
  }
};

/* ===== Profile ===== */
const Profile = {
  async load(){
    const el = document.getElementById('profileContent');
    if(!currentUser){ el.innerHTML='<div class="empty">Inicia sesión</div>'; return; }
    try{
      let { data } = await supabaseClient.from('profiles').select('*').eq('id',currentUser.id).maybeSingle();
      if(!data){
        const defaults = {
          id: currentUser.id,
          email: currentUser.email,
          full_name: currentUser.user_metadata?.full_name || currentUser.user_metadata?.name || 'Usuario',
          zone:'centro', total_points:100, membership:'Básica'
        };
        await supabaseClient.from('profiles').insert([defaults]); data = defaults;
      }
      document.getElementById('userPoints').textContent = data.total_points ?? 0;
      const provider = currentUser?.app_metadata?.provider;
      const providerInfo = provider ? `<div class="hint" style="margin-top:.25rem"><i class="fas fa-link"></i> Conectado con ${provider}</div>` : '';
      const threemaInfo = Threema.config.connected ? `<span class="badge">Threema: ${Threema.config.id}</span>` : '<span class="hint">Threema no configurado</span>';
      el.innerHTML = `
        <div style="background:#fff;border:1px solid var(--primary-soft);border-radius:12px;padding:1rem;box-shadow:var(--shadow)">
          <div style="display:flex;align-items:center;gap:.8rem;margin-bottom:.75rem">
            <div style="width:64px;height:64px;border-radius:50%;background:var(--primary-soft);display:grid;place-items:center;font-weight:800">
              ${(data.full_name||'U').charAt(0).toUpperCase()}
            </div>
            <div>
              <div style="font-weight:700">${data.full_name||'Usuario'}</div>
              <div class="hint">${data.email||''}</div>
              ${providerInfo}
            </div>
          </div>
          <div style="display:grid;gap:.5rem">
            <div style="display:flex;justify-content:space-between;background:var(--primary-pale);padding:.6rem;border-radius:10px"><span><i class="fas fa-map-marker-alt"></i> Zona</span><strong>${data.zone||'—'}</strong></div>
            <div style="display:flex;justify-content:space-between;background:var(--primary-pale);padding:.6rem;border-radius:10px"><span><i class="fas fa-coins"></i> Puntos</span><strong>${data.total_points ?? 0}</strong></div>
            <div style="display:flex;justify-content:space-between;background:var(--primary-pale);padding:.6rem;border-radius:10px"><span><i class="fas fa-crown"></i> Membresía</span><strong>${data.membership||'Básica'}</strong></div>
            <div style="display:flex;gap:.5rem;flex-wrap:wrap;align-items:center">
              ${threemaInfo}
              <button class="btn btn-secondary" onclick="Threema.openConfig()"><i class="fas fa-gear"></i> Threema</button>
              <button class="btn btn-primary" onclick="Profile.openEdit('${encodeURIComponent(data.full_name||'')}','${data.zone||'centro'}')"><i class="fas fa-user-pen"></i> Editar perfil</button>
            </div>
          </div>
        </div>`;
    }catch(_){ el.innerHTML = '<div class="empty">No se pudo cargar tu perfil</div>'; }
  },

  openEdit(fullNameEncoded, zone){
    document.getElementById('editFullName').value = decodeURIComponent(fullNameEncoded||'');
    document.getElementById('editZone').value = zone || 'centro';
    document.getElementById('editProfileModal').classList.add('active');
    document.body.classList.add('modal-open');
  },

  async saveEdit(){
    const btn = document.getElementById('saveProfileBtn');
    const full_name = InputSanitizer.sanitizeText(document.getElementById('editFullName').value);
    const zone = document.getElementById('editZone').value;
    if(!full_name || !zone) return showNotification('warning','Completa nombre y zona');
    btn.disabled = true; btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Guardando…';
    try{
      await supabaseClient.from('profiles').update({full_name, zone, updated_at:new Date().toISOString()}).eq('id', currentUser.id);
      showNotification('success','Perfil actualizado');
      Modals.close('editProfileModal');
      this.load(); Matches.load();
    }catch(_){ showNotification('error','No se pudo actualizar'); }
    finally{ btn.disabled=false; btn.innerHTML='<i class="fas fa-save"></i> Guardar cambios'; }
  },

  async loadHistory(){
    const box = document.getElementById('profileHistory');
    if(!box || !currentUser) return;
    box.innerHTML = '<div class="hint">Cargando…</div>';
    try{
      const { data, error } = await supabaseClient
        .from('exchanges')
        .select(`
          id, completed_at, status, owner_id, requester_id, one_sided,
          requested_book:books!exchanges_requested_book_id_fkey ( id, title, author, front_url, user_id ),
          offered_book:books!exchanges_offered_book_id_fkey   ( id, title, author, front_url, user_id )
        `)
        .or(`owner_id.eq.${currentUser.id},requester_id.eq.${currentUser.id}`)
        .eq('status','completed')
        .order('completed_at', { ascending:false, nullsFirst:false });
      if(error) throw error;

      box.innerHTML = (data||[]).length
        ? data.map(ex => this.historyCard(ex)).join('')
        : `<div class="empty"><i class="fas fa-handshake"></i><div>No hay intercambios completados todavía</div></div>`;
    }catch(_){ box.innerHTML = '<div class="empty">No se pudo cargar el historial</div>'; }
  },

  historyCard(ex){
    const youAreRequester = (ex.requester_id === currentUser.id);
    let entregaste = null, recibiste = null;
    if(ex.one_sided){ if(youAreRequester){ entregaste = ex.offered_book; recibiste = null; } else { entregaste = null; recibiste = ex.requested_book; } }
    else{ entregaste = youAreRequester ? ex.offered_book : ex.requested_book; recibiste = youAreRequester ? ex.requested_book : ex.offered_book; }
    const fecha = ex.completed_at ? new Date(ex.completed_at).toLocaleString() : '—';
    const modo  = ex.one_sided ? 'DONACIÓN' : 'INTERCAMBIO';

    const thumb = (b)=> {
      const clickable = b?.id ? 'clickable' : '';
      const onclk = b?.id ? `onclick="Books.open('${b.id}')" ` : '';
      return b?.front_url
        ? `<img src="${b.front_url}" alt="" class="hist-thumb ${clickable}" ${onclk} loading="lazy">`
        : `<div class="hist-thumb ${clickable}" ${onclk}><i class="fas fa-book"></i></div>`;
    };
    const linkOrText = (b)=> b?.id ? `<a href="#" onclick="Books.open('${b.id}');return false;">${b.title||'—'}</a>` : (b?.title||'—');

    return `
      <div style="background:#fff;border:1px solid var(--primary-soft);border-radius:12px;padding:1rem;box-shadow:var(--shadow);margin-bottom:.75rem">
        <div style="display:flex;gap:.75rem;align-items:center;margin-bottom:.35rem">
          <span class="badge">${modo}</span>
          <span class="hint"><i class="fas fa-calendar-check"></i> ${fecha}</span>
          <span class="hint" style="margin-left:auto">${youAreRequester?'Iniciaste tú':'Iniciado por la otra persona'}</span>
        </div>
        <div style="display:flex;gap:.75rem;align-items:center">
          ${thumb(entregaste)}
          ${ex.one_sided ? '<i class="fas fa-arrow-right" style="opacity:.7"></i>' : '<i class="fas fa-right-left" style="opacity:.7"></i>'}
          ${recibiste ? thumb(recibiste) : '<div class="hist-thumb" style="opacity:.35"><i class="fas fa-book"></i></div>'}
          <div style="flex:1">
            <div><strong>Entregaste:</strong> ${linkOrText(entregaste)} <span class="hint">(${entregaste?.author||'—'})</span></div>
            <div><strong>Recibiste:</strong> ${linkOrText(recibiste)}  <span class="hint">(${recibiste?.author||'—'})</span></div>
          </div>
        </div>
      </div>`;
  }
};
window.Profile = Profile;

/* ===== Auth ===== */
const Auth = {
  _recovery: false,

  async init(){
    if(!window.supabaseClient){
      showNotification('error','Supabase no inicializado');
      return;
    }

    const show = (id, on)=>{ const el=document.getElementById(id); if(el) el.style.display = on ? 'grid' : 'none'; };
    show('googleBtn',   !!(window.SOCIAL_LOGIN_ENABLED && SOCIAL_LOGIN_ENABLED.google));
    show('appleBtn',    !!(window.SOCIAL_LOGIN_ENABLED && SOCIAL_LOGIN_ENABLED.apple));

    await this._handleRecoveryInUrl();

    const { data:{ session } } = await supabaseClient.auth.getSession();
    currentUser = session?.user || null;

    if(this._recovery){
      toggleAuthViews(false);
      this.showPasswordResetModal();
      return;
    }

    toggleAuthViews(!!currentUser);
    if(currentUser) bootstrapAfterLogin();
    else Views?.show?.('loginView');
  },

  async handleLogin(){
    const email = InputSanitizer.sanitizeEmail(document.getElementById('loginEmail').value);
    const password = document.getElementById('loginPassword').value;
    if(!InputSanitizer.isValidEmail(email)) return showNotification('warning','Introduce un email válido');
    if(!password) return showNotification('warning','Introduce tu contraseña');
    const btn = document.getElementById('loginBtn'); btn.disabled = true; btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Entrando…';
    try{
      const { error } = await supabaseClient.auth.signInWithPassword({ email, password });
      if(error) throw error;
      showNotification('success','Sesión iniciada');
    }catch(e){ showNotification('error', e.message || 'No se pudo iniciar sesión'); }
    finally{ btn.disabled=false; btn.innerHTML='<i class="fas fa-sign-in-alt"></i> Iniciar sesión'; }
  },

  async handleSignup(){
    const name  = (document.getElementById('signupName')||{}).value?.trim();
    const zone  = document.getElementById('signupZone').value || 'centro';
    const email = InputSanitizer.sanitizeEmail((document.getElementById('signupEmail')||{}).value);
    const pass  = (document.getElementById('signupPassword')||{}).value || '';
    const conf  = (document.getElementById('signupConfirm')||{}).value || '';
    if(!InputSanitizer.isValidEmail(email)) return showNotification('warning','Email no válido');
    if(!PasswordRules.isStrong(pass)) return showNotification('warning', PasswordRules.message(pass));
    if(pass!==conf) return showNotification('warning','Las contraseñas no coinciden');

    const btn=document.getElementById('signupBtn'); btn.disabled=true; btn.innerHTML='<i class="fas fa-spinner fa-spin"></i> Creando…';
    try{
      const { error } = await supabaseClient.auth.signUp({
        email, password: pass,
        options: { data: { full_name: name||'', zone }, emailRedirectTo: `${location.origin}/?signup=1` }
      });
      if(error) throw error;
      showNotification('success','Revisa tu correo para confirmar la cuenta');
      Views.show('loginView');
    }catch(e){ showNotification('error', e.message || 'No se pudo crear la cuenta'); }
    finally{ btn.disabled=false; btn.innerHTML='<i class="fas fa-user-plus"></i> Crear cuenta'; }
  },

  async handleReset(){
    const email = InputSanitizer.sanitizeEmail(document.getElementById('resetEmail').value);
    if(!InputSanitizer.isValidEmail(email)) return showNotification('warning','Introduce un email válido');
    const btn = document.getElementById('resetBtn'); btn.disabled=true; btn.innerHTML='<i class="fas fa-spinner fa-spin"></i> Enviando…';
    try{
      const { error } = await supabaseClient.auth.resetPasswordForEmail(email, { redirectTo: `${location.origin}/?reset=1` });
      if(error) throw error;
      showNotification('success','Te enviamos un correo de recuperación');
      Views.show('loginView');
    }catch(e){ showNotification('error', e.message || 'No se pudo enviar el correo'); }
    finally{ btn.disabled=false; btn.innerHTML='<i class="fas fa-envelope"></i> Enviar correo de recuperación'; }
  },

  showPasswordResetModal(){
    const m = document.getElementById('passwordResetModal');
    if(!m) return;
    m.classList.add('active');
    document.body.classList.add('modal-open');
    const inp = m.querySelector('#newPassword');
    if(inp) setTimeout(()=>inp.focus(), 50);
  },

  async saveNewPassword(){
    const pass=(document.getElementById('newPassword')||{}).value||'';
    const conf=(document.getElementById('confirmPassword')||{}).value||'';
    if(!PasswordRules.isStrong(pass)) return showNotification('warning', PasswordRules.message(pass));
    if(pass!==conf) return showNotification('warning','Las contraseñas no coinciden');
    const btn=document.getElementById('saveNewPasswordBtn'); btn.disabled=true; btn.innerHTML='<i class="fas fa-spinner fa-spin"></i> Guardando…';
    try{
      const { error } = await supabaseClient.auth.updateUser({ password: pass });
      if(error) throw error;
      showNotification('success','Contraseña actualizada');
      document.getElementById('passwordResetModal').classList.remove('active');
      document.body.classList.remove('modal-open');
      this._recovery=false;
    }catch(e){ showNotification('error', e.message || 'No se pudo actualizar'); }
    finally{ btn.disabled=false; btn.innerHTML='<i class="fas fa-save"></i> Guardar nueva contraseña'; }
  },

  async handleLogout(){
    try{ await supabaseClient.auth.signOut(); showNotification('info','Sesión cerrada'); }catch(_){}
  },

  async handleOAuth(provider){
    try{
      await supabaseClient.auth.signInWithOAuth({ provider, options:{ redirectTo: location.origin } });
    }catch(_){
      showNotification('error','No se pudo iniciar con ' + provider);
    }
  },

  async _handleRecoveryInUrl(){
    try{
      const url = new URL(location.href);
      if(url.searchParams.get('reset') === '1'){ this._recovery = true; return; }
      if(location.hash.includes('type=recovery')){ this._recovery = true; return; }
    }catch(_){ /* noop */ }
  }
};

// Main initialization function
async function initializeApp() {
  try {
    // Initialize Supabase
    if (!initializeSupabase()) {
      showNotification('error', 'Error de inicialización. Recarga la página.');
      return;
    }

    // Setup auth state listener
    await setupAuthStateListener();
    
    // Initialize Auth
    if (window.Auth && typeof Auth.init === 'function') {
      await Auth.init();
    }
    
  } catch (error) {
    console.error('App initialization error:', error);
    showNotification('error', 'Error al cargar la aplicación');
  }
}

// Add error handlers
window.addEventListener('error', function(e) {
  console.error('Global error:', e.error);
});

window.addEventListener('unhandledrejection', function(e) {
  console.error('Unhandled promise rejection:', e.reason);
});

// Initialize app when DOM is ready - single initialization
document.addEventListener('DOMContentLoaded', initializeApp);
</script>
</body>
</html>
